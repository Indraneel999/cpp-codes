*********ARRAYS*************

----------------------------------------------------------------------
        KADANEâ€™S ALGORITHM

    int ans = INT_MIN;
    int sum = 0;
    for(i = 0 to n) {
        sum += a[i];
        if(ans < sum)
        ans = sum;
        if(sum < 0)
            sum = 0;
    }

    Maximum Product Subarray

    int maxProduct(vector<int>& nums) {
        int maxproduct = nums[0];
        int minproduct = nums[0];
        int maxres = nums[0];
        for(int i = 1; i < nums.size(); i++) {
            if(nums[i] >= 0) {
                maxproduct = max(nums[i], maxproduct*nums[i]);
                minproduct = min(nums[i], minproduct*nums[i]);
            }
            else {
                int temp = maxproduct;
                maxproduct = max(nums[i], minproduct*nums[i]);
                minproduct = min(nums[i], temp*nums[i]);
            }
            maxres = max(maxres, maxproduct);
  }
        
        return maxres;
    }
---------------------------------------------------------------------------------------
    SUB-ARRAY WITH GIVEN SUM

case1: only positive values
    j=0;
    //s contains the desired sum
    while(t--)
    {
        result = 0;
        cin>>n>>s;
        arr.resize(n);
        for(i=0;i<n;i++)
        {
            cin>>arr[i];   
            result+=arr[i];  //checking while inserting
            while(result > s && j<=i)//keep removing element until result greater than sum
            {
                result-=arr[j];
                j++;
            }
            if(result == s)
            {
                cout<<j+1<<" "<<i+1<<"\n";
                break;  //stops taking input once the sum is matched
            }
        }
        if(i==n)
            cout<<"-1\n";
    }

    case2: both positive and negative values

    int subarraySum(vector<int>& nums, int k) {
        
        int sum=0,count=0;
        unordered_map<int,int> m;
        m[0]++;
        for(int i=0;i<nums.size();i++)
        {
            sum+=nums[i];
            if(m.find(sum-k)!=m.end())
                count+=m[sum-k];
            m[sum]++; //must be written after if
            //else consider the case [1] k=0
        }
        return count;
    }

  ---------------------------------------------------------------------------
   SORT ARRAY CONTAINING 0 1 AND 2

 APPROACH 1
  using three way partitioning

  void sort_array(vector<long long> &a)
{
    //i is used to traverse the array 
    //low stores the starting location where next 0 is to be put
    //high stores the location where next 2 is to be placed
    long low=0,i=0,high = a.size()-1;
    while(i <= high)
    {
        if(a[i] == 0)
            swap(&a[i++],&a[low++]); //reference also works in vectors
        else
            if(a[i]==1)
                i++; // low and i will be different when we get first 1
        else
            if(a[i]==2)
                swap(&a[i],&a[high--]);
    } 
}

  APPROACH 2
   counting occurrences of 0 1 and 2


   void sort_array(vector<long long>& arr)
  {
    vector<long long> count(3,0);
    for(long long i=0;i<arr.size()-1;i++)
        count[arr[i]]++;
    for(long long i=0;i<count[0];i++)
        arr[i]=0;
    for(long long i=count[0];i<(count[1]+count[0]);i++)
        arr[i]=1;
    for(long long i=(count[1]+count[0]);i<arr.size();i++)
        arr[i]=2;
}

-------------------------------------------------------------------------

 REVERSE ARRAY IN GROUPS

        for(i=0;i<n;i+=k)
       {
           j=i;
           a=1;
           if((i+k)>n) //if it exceeds array size
                k = n-i;
             while(j<(i+k-a)) //swap with the corresponding element
            {
                temp = arr[j]; 
                arr[j] = arr[i+k-a]; // a is used to decrement end position each time
                arr[i+k-a] = temp;   
                j++;
                a++;
            }
         } 

 -----------------------------------------------------------------------------------

 TRAPPING RAIN WATER

 ll trapping_water(vector<ll> &arr)
{
    ll left=0,right=arr.size()-1; //to store the indices
    ll max_left=0,max_right=0; //to store the maximum height bar from left and right
    ll res=0;
    while(left<=right)
    {
        if(arr[left] < arr[right]) // need to check this else suppose decreasing order height
        {
            if(arr[left]>max_left)
                max_left = arr[left];
            else
                res+=max_left-arr[left];
            left++;
        }

        else
        {
            if(arr[right]>max_right)
                max_right = arr[right];
            else
                res+=max_right-arr[right];
            right--;
        }

    }
    return res;
}
-----------------------------------------------------------------------------------------
PYTHOGOREAN TRIPLET- a2 + b2 = c2

bool find_triplet(vector<int> &arr)
{
    //recieved an array after squaring all of it's elements

    sort(arr.begin(),arr.end()); //sort
    ll left,right;
    for(ll i=arr.size()-1;i>1;i--)  
    { 
        left = 0;
        right = i-1;
        while(left < right) //apply meet in middle algorithm
        {
            if(arr[left]+arr[right]<arr[i])
                left++;
            else if(arr[left]+arr[right]>arr[i])
                right--;
            else 
                return 1;
        }
    }
    
    return 0;
}
-------------------------------------------------------------------------------

BUY SELL

/*
The cost of stock on each day is given in an array A. 
Find all the days on which you buy and sell the stock 
so that in between those days you shouldn't have any loss
i/p-100 180 260 310 40 535 695
o/p- (0 3) (4 6)
*/

void buy_sell(vector<int> &arr)
{
    int max;
    int i=arr.size()-1;
    vector< pair<int,int> > result;
    while(i>0 && arr[i-1]>arr[i])
        i--;
    max = i;
    i--;
    while(i>=0)
    {
        if(arr[i]>arr[max])
        {
            pair<int,int> foo = make_pair(i+1,max);
            result.push_back(foo);
            max = i;
        }
        i--;
    }
    pair<int,int> foo = make_pair(i+1,max);
    result.push_back(foo);
    
    for(i=result.size()-1;i>=0;i--)
    {
        cout<<"("<<result[i].first<<","<<result[i].second<<") ";
    }
    cout<<"\n";
}
---------------------------------------------------------------------------------------

PASCAL TRIANGLE

vector<int> arr; //used to store final output
    vector<int> clone; //used for swapping
    clone.push_back(1);
    arr.push_back(1);
    cin>>n;
    for(i=2;i<=n;i++)
    {
        clone.swap(arr);
        arr.resize(i);
        arr[0]=arr[i-1]=1;
        for(j=1;j<(i-1);j++)
            arr[j]=clone[j-1]+clone[j];
    }
    return arr;
 -------------------------------------------------------------------------

 ROTATE ARRAY BY K

i/p- 1 2 3 4 5 6 7
o/p- 5 6 7 1 2 3 4
  void reverse(vector<int>& nums,int start,int end)
    {
        int temp;
        while(start<end)
        {
            temp = nums[start];
            nums[start] = nums[end];
            nums[end] =temp;
            start++;
            end--;
        }
    }
    void rotate(vector<int>& nums, int k) {
        
        k = k%nums.size();
        reverse(nums,0,nums.size()-1);
        reverse(nums,0,k-1);
        reverse(nums,k,nums.size()-1);
        
       
    }
    -------------------------------------------------------------
    MOVE ZEROES TO THE END

     void moveZeroes(vector<int>& nums) {
        
        int start = -1;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]==0 && start==-1)
                    start=i;
            else if(nums[i])
            { 
                if(start!=-1)
                {
                    nums[start] = nums[i];
                    nums[i]=0;
                    start++;
                }
            }
        }
    }
    -----------------------------------------------------------
    MERGING TWO SORTED array

    APPROACH-without using additional array
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        
        int index = m+n-1;
        int i=m-1,j=n-1;
        for(;j>=0 && i>=0;index--)
        {
            if(nums1[i]>=nums2[j])
            {
                nums1[index]=nums1[i];
                i--;
            }
            else
            {
                nums1[index]=nums2[j];
                j--;
            }   
        }
        while(j>=0)
        {
            nums1[index]=nums2[j];
            index--;
            j--;
        }
        while(i>=0)
        {
            nums1[index]=nums1[i];
            index--;
            i--;
        }
    }
    ------------------------------------------------------------------

    find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.The degree of this array is defined as the maximum frequency of any one
    of its elements.


    int findShortestSubArray(vector<int>& nums) {
        unordered_map<int,vector<int>> result; 
        //vector used to keep track of degree and first and last occurrence.
        int final=1;
        int degree = 1;
        vector<int> foo;
        for(int i=0;i<nums.size();i++)
        {
            if(result.find(nums[i])==result.end())
            {
                foo = {1,i,i};
                result[nums[i]]=foo;
            }
            else
            {
                foo = result[nums[i]];
                foo[0]++;
                foo[2]=i;
                result[nums[i]]=foo;
                if(foo[0]>degree)
                {
                    degree = foo[0];
                    final = foo[2]-foo[1]+1;
                    
               }
                else if(foo[0]==degree)
                    final = min(final,foo[2]-foo[1]+1);
            }
        }
        return final;
    }
    --------------------------------------------------------------------------
    MAX SUBARRAY

    int maxSubArray(vector<int>& nums) {
        
        int sum=0;
        int max_sum = nums[0];
        for(int i=0;i<nums.size();i++)
        {
            sum+=nums[i];
            if(sum>max_sum)
                max_sum = sum;
            if(sum < 0)
                sum = 0;
        }
        
        return max_sum;
    }
    ---------------------------------------------------------------------------------

    BUY SELL STOCK II--maximise profit

    int maxProfit(vector<int>& prices) {
        
        int i,max,min,profit=0;
         max = min = i=prices.size()-1;
        i--;
        while(i>=0)
        {
            if(prices[i]<prices[min])
                min = i;
           else if(prices[i]>prices[min])
            {
                profit+=prices[max]-prices[min];
                max = min = i;
            }
            i--;
        }
        if(min!=max)
            profit+=prices[max]-prices[min];
    return profit;
        
    }
    ----------------------------------------------------------------------------------
    ELEMENT APPEARING MORE THAN N/2 TIMES

APPROACH--  O(1)
    //AS the element appearing more than n/2 times is always in majority variable
    int majorityElement(vector<int>& nums) {
        
        int majority=nums[0];
        int count=1;
        for(int i=1;i<nums.size();i++)
        {
            if(count==0)
            {
                majority=nums[i];
                count++;
            }
            else if(majority==nums[i])
                    count++;
            else
                count--;
                
        }
     return majority;   
    }
-----------------------------------------------------------------------
FIND DISAPPEARED NUMBER

numbers in range [1,n](inclusive)
some elements appear twice while some once
find missing elements without extra space and O(n)

vector<int> findDisappearedNumbers(vector<int>& nums) {
        
        vector<int> r;
        for(int i=0;i<nums.size();i++)
            nums[abs(nums[i])-1]=abs(nums[abs(nums[i])-1])*-1;

      //keep in mind about absolute value also I made a mistake that instead of RHS I was
      //solving by initialising LHS by -1

        for(int i=0;i<nums.size();i++)
            if(nums[i]>0)
                r.push_back(i+1);
        
        return r;
    }

--------------------------------------------------------------------------------
THREE SUM
question- Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers


int threeSumClosest(vector<int>& nums, int target) {
        sort(nums.begin(),nums.end());
        int second,third,sum,res=INT_MAX;
        for(int first=0;first!=nums.size()-1;first++)
        {
            second = first+1;
            third = nums.size()-1;
            while(second!=third)
            {
                sum=nums[first]+nums[second]+nums[third];
                abs(res)>abs(target-sum)?res=target-sum:res;
                if(sum>target)
                    third--;
                else if(sum<target)
                    second++;
                else
                    return target;
                
            }
        
        }
        return target-res;
    }
    --------------------------------------------------------------------------------------
   
   3 SUM-sum of three element is 0

    vector<vector<int>> threeSum(vector<int>& nums) {
        int second,third,sum;
        vector<vector<int>> result;
        sort(nums.begin(),nums.end());
        for(int first=0;first<(nums.size()-2) && nums.size()>2;first++)
        {
            
            second= first+1;
            third = nums.size()-1;
            while(second<third)
            {
                sum=nums[first]+nums[second]+nums[third];
                if(sum>0)
                    third--;
                else if(sum<0)
                    second++;
                else
                {
                    vector<int> clone={nums[first],nums[second],nums[third]};
                    result.push_back(clone);
                    while(second<(nums.size()-1) && nums[second]==nums[second+1])
                        second++;
                    while(third>0 && nums[third]==nums[third-1])
                        third--;
                    second++;
                    third--;
                }
            }
            while(first<(nums.size()-1) && nums[first]==nums[first+1])
                first++;
            
        }
       
        return result;
    }
    ----------------------------------------------------------------------

    Given an array with n integers, your task is to check if it could become non-decreasing by modifying at most 1 element.

    bool checkPossibility(vector<int>& nums) {
      int count=0;
        for(int i=1;i<nums.size();i++)
        {
            if(nums[i-1]>nums[i])
            {
                count++;
                if(i-2<0 || nums[i-2]<=nums[i])
                   nums[i-1]=nums[i];
                else
                    nums[i]=nums[i-1];
            }
        }
       return count<=1;   
    }
    --------------------------------------------------------------
    AREA OF HISTOGRAM

    int largestRectangleArea(vector<int>& heights) {
        stack<int> index;
        int j,area=INT_MIN,i;
        for(i=0;i<heights.size();i++)
        {
             if(index.empty() || heights[index.top()]<=heights[i])
                 index.push(i);
            else
            {
                while(!index.empty() && heights[index.top()]>heights[i])
                {
                    j = index.top();
                    index.pop();
                    if(index.empty())   
                        area = max(area,(i)*heights[j]);
                    else
                        area = max(area,(i-index.top()-1)*heights[j]);                    
                        //index i se index.top tak 
                        // ke elements height[j] se chote ya barabar hai.
                }
                index.push(i);
             }
          }
        while(!index.empty())
        {
            
                    j = index.top();
                    index.pop();
                    if(!index.empty())
                        area = max(area,(i-index.top()-1)*heights[j]);
                    else
                        area = max(area,i*heights[j]);
                
        }
        return max(0,area);
  }
  -------------------------------------------------------------------------
  4 SUM

  vector<vector<int>> fourSum(vector<int>& nums, int target) {
        
        int third,four;
        sort(nums.begin(),nums.end());
        vector<vector<int>> result;
        if(nums.size()<4)
            return result;
        for(int first=0;first<nums.size()-3;first++)
        {
            
            for(int second=first+1;second<nums.size()-2;second++)
            {
                
                third=second+1;
                four = nums.size()-1;
                while(third<four)
                {
                    if((nums[first]+nums[second]+nums[third]+nums[four])==target)
                   {
                    vector<int>clone={nums[first],nums[second],nums[third],nums[four]};
                    result.push_back(clone);
                    while(third<four && nums[third]==nums[third+1])
                        third++;
                    while(third<four && nums[four]==nums[four-1])
                        four--;
                 
  
                    third++;
                    four--;
                    
                   }
                else if((nums[first]+nums[second]+nums[third]+nums[four])<target)
                        third++;
                else 
                    four--;

                }
                while(second<nums.size()-1 && nums[second]==nums[second+1])
                second++;
            }
            while(first<nums.size()-1 && nums[first]==nums[first+1])
                first++;
        }
        
        return result;
    }
-----------------------------------------------------------------------------------------.

SEARCH IN ROTATED ARRAY

 int search(vector<int>& nums, int target) {
        
        if(!nums.size())
            return -1;
        int low=0,high=nums.size()-1,mid;
        while(low<=high)
        {
            mid=(low+high)/2;
            if(nums[mid]==target)
                return mid;
            if(nums[low]<=nums[mid])
            {
                if(target>=nums[low] && target<nums[mid])
                    high=mid-1;
                else
                    low=mid+1;
            }
            else
            {
                if(target>nums[mid] && target<=nums[high])
                    low=mid+1;
                else
                    high=mid-1;
                    
            }
        }
        return -1;
    }
------------------------------------------------------------------------------
PRODUCT OF ARRAY EXCEPT SELF

vector<int> productExceptSelf(vector<int>& nums) {
        
        vector<int> result(nums.size());
        result[0]=1;
        for(int i=1;i<nums.size();i++)
            result[i]=result[i-1]*nums[i-1];
        int right=1; //stores the right sum of an element
        for(int i=nums.size()-1;i>=0;i--)
        {
            result[i]*=right;
            right*=nums[i];
        }
        return result;
        
    }
    --------------------------------------------------------------
    MAXIMUM PRODUCT SUBARRAY

    int maxProduct(vector<int>& nums) {
        
        int maximum=nums[0],minimum=nums[0],res=nums[0];
        for(int i=1;i<nums.size();i++)
        {
            if(nums[i]<0)
                swap(maximum,minimum);
            maximum=max(nums[i],maximum*nums[i]);
            minimum=min(nums[i],minimum*nums[i]);
            if(res<maximum)
                res=maximum;
            
        }
        return res;
    }
--------------------------------------------------------------------------

MINIMUM DEPTH OF TREE -> ITERATIVE APPROACH

 int minDepth(TreeNode* root) {
        
        if(root==NULL)
            return 0;
        int minimum=INT_MAX;
        pair<TreeNode*,int> foo;
        stack<pair<TreeNode*,int>> st;
        st.push(make_pair(root,1));
        while(!st.empty())
        {
            foo = st.top();
            st.pop();
            if(foo.first->left == NULL && foo.first->right==NULL)
                minimum=min(minimum,foo.second);
            
            if(foo.first->left != NULL)
                st.push(make_pair(foo.first->left,foo.second+1));
            
            if(foo.first->right!=NULL)
                st.push(make_pair(foo.first->right,foo.second+1));
               
        }
        return minimum;   
    }
    ---------------------------------------------------------------------------------------

   INORDER TRAVERSAL-- Iterative Approach

    vector<int> inorderTraversal(TreeNode* root) {
      
    vector<int> result;
    if(!root)
        return result;
    stack<TreeNode*> st;
    TreeNode* temp=root;
    
    while(temp!=NULL || !st.empty())
    {
        while(temp!=NULL)
        {
            st.push(temp);
            temp=temp->left;
        }
        temp=st.top();
        st.pop();
        result.push_back(temp->val);
        temp=temp->right;
    }
    return result;
    }
    ----------------------------------------------------------------------------------
    PREORDER TRAVERSAL-- Iterative Approach
    
    vector<int> preorderTraversal(TreeNode* root) {
          
    vector<int> result;
    if(!root)
        return result;
    stack<TreeNode*> st;
    TreeNode* temp=root;
    
    while(temp!=NULL || !st.empty())
    {
        while(temp!=NULL)
        {
            st.push(temp);
            result.push_back(temp->val);
            temp=temp->left;
        }
        temp=st.top();
        st.pop();
        temp=temp->right;
    }
    return result;
    
    }

    ----------------------------------------------------------------------------------
    POSTORDER TRAVERSAL - Iterative Approach
    vector<int> postorderTraversal(TreeNode* root) {
        
    vector<int> result;
    if(!root)
        return result;
    stack<TreeNode*> st;
    TreeNode* temp;
        int value;
    st.push(root);
    while(!st.empty())
    {
        temp = st.top();
        st.pop();
        result.push_back(temp->val);
        if(temp->left!=NULL)
            st.push(temp->left);
        if(temp->right!=NULL)
            st.push(temp->right);
        
    }
    int start=0,end=result.size()-1;
        while(start<end)
        {
            value = result[start];
            result[start]=result[end];
            result[end]=value;
            start++;
            end--;
                
        }
    return result;
    
    }

    ----------------------------------------------------------------------------------


    GROUP ANAGRAMS

      vector<vector<string>> groupAnagrams(vector<string>& strs) {
     
        unordered_map<string,vector<string>> m;
        string temp;
        vector<vector<string>> s;
        for(auto a:strs)
        {
            temp=a;
            sort(temp.begin(),temp.end());
            m[temp].push_back(a);
        }
        for(auto a : m)
            s.push_back(a.second);
        return s;
    }
--------------------------------------------------------------------------------------------
LONGEST SUBSTRING WITHOUT REPEATATION

int lengthOfLongestSubstring(string s) {
        
        int start=0,res=0;
        unordered_map<char,int> m;
        for(int i=0;i<s.length();i++)
        {
            if(m.find(s[i])!=m.end())
                 start=max(start,m[s[i]]+1);
            m[s[i]]=i;
           
            res=max(res,i-start+1);
        }
        return res;
    }
    --------------------------------------------------------------------------------

Question- Given a non-empty array of integers, every element appears twice except for one. 
          Find that single one.

     int singleNumber(vector<int>& nums) {
     
        int res=0;
        for(auto a:nums)
            res^=a;
        return res;
    }

    usnig concept that 
    a XOR 0 = a
    a XOR a = 0
    --------------------------------------------------------------------------------
   K-th SMALLEST IN BST
   Approach- Inorder traversal of BST
   
   int kthSmallest(TreeNode* root, int k) {
        
        vector<int> result;
        
        stack<TreeNode*> st;
        TreeNode* temp=root;
    
        while(temp!=NULL || !st.empty())
        {
            while(temp!=NULL)
            {
                st.push(temp);
                temp=temp->left;
            }
            temp=st.top();
            st.pop();
            result.push_back(temp->val);
            if(result.size()==k)
                return result[k-1];
            temp=temp->right;
        }
        return result[k-1];
    
    }
    ---------------------------------------------------------------------------

    COIN CHANGE

    int change(int amount, vector<int>& coins) {
        if(amount==0)
            return 1;
        vector<int> dp(amount+1);
        dp[0]=1;
        for(int i=0;i<coins.size();i++)
            for(int j=0;j<=amount;j++)
                if(j-coins[i]>=0)
                    dp[j]=dp[j-coins[i]]+dp[j];
                    
        return dp[amount];
    }
----------------------------------------------------------------------------------------
SUBSETS OF A SET

 void backtrack(vector<vector<int>> &result,vector<int> &nums,vector<int> v,int pos)
    {
        result.push_back(v);
        for(int i=pos;i<nums.size();i++)
        {
            v.push_back(nums[i]);
            backtrack(result,nums,v,i+1);
            v.pop_back();
        }
    }
    vector<vector<int>> subsets(vector<int>& nums) {
        
        vector<vector<int>> result;
        vector<int> v;
        backtrack(result,nums,v,0);
        return result;
    }
    ---------------------------------------------------------------------------

    PERMUTATIONS

   @@@ approach1

    void backtrack(vector<vector<int>> &result,vector<int> &nums,vector<int> v)
    {
        if(v.size()==nums.size())
        {
            result.push_back(v);
            return;
        }
        
        for(int i=0;i<nums.size();i++)
        {
            if(find(v.begin(),v.end(),nums[i])==v.end())
            {
                v.push_back(nums[i]);
                backtrack(result,nums,v);
                v.pop_back();
            }
        }
        
    }
    vector<vector<int>> permute(vector<int>& nums) {
     
        vector<vector<int>> result;
        vector<int> v;
        backtrack(result,nums,v);
        return result;
    }
 @@@@@
  approach 2

  void backtrack( vector<vector<int>>& result,vector<int> &nums,int pos)
    {
        if(pos>=nums.size())
        {
            result.push_back(nums);
            return;
        }
        
        for(int i=pos;i<nums.size();i++)
        {
            swap(nums[i],nums[pos]);
            backtrack(result,nums,pos+1);
            swap(nums[i],nums[pos]);
        }
    }
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        
        vector<vector<int>> result;
        backtrack(result,nums,0);
        return result;
    }
    -----------------------------------------------------------------------------

  Reverse Linked List From m to n

  example- Input: 1->2->3->4->5->NULL, m = 2, n = 4
           Output: 1->4->3->2->5->NULL

  ListNode* reverseBetween(ListNode* head, int m, int n) {
    
        ListNode* newnode = new ListNode(0);
        newnode->next=head;
        ListNode* first=newnode;
        int i=1;
        while(i<m)
        {
            i++;
            first=first->next;
        }
        ListNode* second = first->next;
        ListNode* third;
        while(i<n)
        {
            i++;
            third=second->next;
            second->next=third->next;
            third->next=first->next;
            first->next=third;
        }
        
        return newnode->next;
    
    }
  -------------------------------------------------------------------------------

  Anticlockwise Rotation of matrix by 90

  void rotate(vector<vector<int>> &matrix)
 {
    int n=matrix.size();
    int temp;
    for(int i=0;i<n/2;i++)  // as there will be maximum of n/2 square cycles
    {
        for(int j=i;j<n-1-i;j++)
        {
            temp = matrix[i][j];
            matrix[i][j]=matrix[j][n-1-i];
            matrix[j][n-1-i]=matrix[n-1-i][n-1-j];
            matrix[n-1-i][n-1-j]=matrix[n-1-j][i];
            matrix[n-1-j][i]=temp;
        }
    }
 }
 -----------------------------------------------------------------------------------------

 Anticlockwise Rotation of matrix by 90


void rotate(vector<vector<int>> &matrix)
 {
    int n=matrix.size();
    int temp;
    for(int i=0;i<n/2;i++)
    {
        for(int j=i;j<n-1-i;j++)
        {
            temp = matrix[i][j];
            matrix[i][j]=matrix[n-1-j][i];
            matrix[n-1-j][i]=matrix[n-1-i][n-1-j];
            matrix[n-1-i][n-1-j]=matrix[j][n-1-i];
            matrix[j][n-1-i]=temp;
        }
    }
 }
----------------------------------------------------------------

Question:-
Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

    Each row must contain the digits 1-9 without repetition.
    Each column must contain the digits 1-9 without repetition.
    Each of the 9 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition.


    bool isValidSudoku(vector<vector<char>>& board) {
        
        int n=board.size(),k;
        vector<vector<int>> row(n,vector<int>(n));
        vector<vector<int>> col(n,vector<int>(n));
        vector<vector<int>> grid(n,vector<int>(n));
        int num;
        
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
            {
                if(board[i][j]!='.')
                {
                    num=board[i][j]-'0'-1;
                    k = (i/3)*3+j/3;
                    if(row[i][num] || col[j][num] || grid[k][num])
                        return false;
                    else
                        row[i][num] = col[j][num] = grid[k][num] = 1;
                }
            }
        return true;
    }

    ---------------------------------------------------------------

    Largest Number that can be formed using elements of given array


     string largestNumber(vector<int>& nums) {
        
         string res;
         sort(nums.begin(),nums.end(),[] (int i,int j){
             return to_string(i)+to_string(j) > to_string(j)+to_string(i); 
         });
         for(auto a:nums)
            res+=to_string(a);
         return res[0]=='0' ? "0" : res;
    }

    ---------------------------------------------------------------------

    A message containing letters from A-Z is being encoded to numbers using the following mapping:

    'A' -> 1
    'B' -> 2
    ...
    'Z' -> 26

    Given a non-empty string containing only digits, determine the total number of ways to decode it.
    
    int numDecodings(string s) {
        
        if(!s.length() || s[0]=='0')
            return 0;
        int first=1,second=1;
         
        for(int i=1;i<s.length();i++)
        {
            if(s[i]=='0')
                first=0;
            if(s[i-1]=='1' || s[i-1]=='2' && s[i]<'7')
            {
                first+=second;
                second=first-second;
            }
            else
                second=first;
        }
        return first;
        
    }
    -------------------------------------------------------------------

    contiguous subarray of size atleast two that sum upto multiple of k

      bool checkSubarraySum(vector<int>& nums, int k) {
        
        k=abs(k);
        if(!k)
        {
            vector<int>::iterator it;
            if((it=find(nums.begin(),nums.end(),0))!=nums.end() && nums.size()>1)
                if(*(++it)==0)
                    return true;
            return false;
        }
        unordered_map<int,int> dp;
        int sum=0;
        for(int i=0;i<nums.size();i++)
        {
            sum+=nums[i];
            if(dp.find(sum%k)!=dp.end())
            {
                if((i-dp[sum%k])>=1)
                    return true;
            }
            else  if(sum%k==0 && i>0)
                return true;
            else
                dp[sum%k]=i;
                
        }
        return false;
    }
    
    
   --------------------------------------------------------------------------
   Given a 2D binary matrix filled with 0â€™s and 1â€™s, find the largest rectangle containing all ones and return its area.
   int Solution::maximalRectangle(vector<vector<int> > &A) {
    
    
        vector<int> col(A[0].size(),0);
        stack<int> st;
        int area = 0;
        int i,j;
        for(i=0;i<A.size();i++)
        {
            for(j=0;j<A[0].size();j++)
                col[j] = A[i][j]*col[j]+A[i][j];
            
            for(j=0;j<A[0].size();j++)
            {
                if(st.empty() || col[st.top()] <= col[j])
                    st.push(j);
                else{
                while(!st.empty() && col[st.top()] > col[j])
                {
                    int temp = st.top();
                    st.pop();
                    if(st.empty())   
                        area = max(area,(j)*col[temp]);
                    else
                        area = max(area,(j-st.top()-1)*col[temp]);
                }
                st.push(j);
                }
            }
            
            while(!st.empty())
            {
            
                    int temp = st.top();
                    st.pop();
                    if(!st.empty())
                        area = max(area,(j-st.top()-1)*col[temp]);
                    else
                        area = max(area,(j)*col[temp]);
            }
            
        }
        
        return max(0,area);
        
}

   
